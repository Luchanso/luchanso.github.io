{"version":3,"file":"022d3153bf09c36cd784dcdb36ffbd187f9c96d7-1c8cb35f348d83b2f7ab.js","mappings":"yMAMA,SAASA,IAcP,OAbAA,EAAWC,OAAOC,OAASD,OAAOC,OAAOC,OAAS,SAAUC,GAC1D,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GAEvB,IAAK,IAAII,KAAOD,EACVP,OAAOS,UAAUC,eAAeC,KAAKJ,EAAQC,KAC/CL,EAAOK,GAAOD,EAAOC,IAK3B,OAAOL,GAEFJ,EAASa,MAAMC,KAAMR,WAG9B,SAASS,EAA8BP,EAAQQ,GAC7C,GAAc,MAAVR,EAAgB,MAAO,GAC3B,IAEIC,EAAKJ,EAFLD,EAAS,GACTa,EAAahB,OAAOiB,KAAKV,GAG7B,IAAKH,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IACjCI,EAAMQ,EAAWZ,GACbW,EAASG,QAAQV,IAAQ,IAC7BL,EAAOK,GAAOD,EAAOC,IAGvB,OAAOL,EA8FT,IAIIgB,EAAY,CAAC,YAAa,aAAc,OACxCC,EAAa,CAAC,cAAe,WAAY,MAAO,SAAU,QAAS,MAAO,UAAW,iBAAkB,cAAe,mBAAoB,kBAC1IC,EAA2B,cAAiB,SAAUC,EAAOC,GAC/D,IAAIC,EAAYF,EAAME,UAClBC,EAAaH,EAAMG,WACnBC,EAAMJ,EAAMI,IACZC,EAAOb,EAA8BQ,EAAOH,GAEhD,OAAoB,gBAAoB,MAAOpB,EAAS,CACtD6B,MAAOJ,EACPK,OAAQJ,EACRF,IAAKA,EACLG,IAAKA,GACJC,OASDG,GAAuB,SAAW,SAAUR,EAAOC,GACrD,IAAIQ,EAAcT,EAAMS,YACpBC,EAAWV,EAAMU,SACjBC,EAAMX,EAAMW,IACZC,EAASZ,EAAMY,OACfC,EAAQb,EAAMa,MACdC,EAAMd,EAAMc,IACZC,EAAUf,EAAMe,QAChBC,EAAiBhB,EAAMgB,eACvBC,EAAcjB,EAAMiB,YACpBC,EAAwBlB,EAAMmB,iBAC9BA,OAA6C,IAA1BD,EAAmC,oBAAsBA,EAC5EE,EAAiBpB,EAAMoB,eACvBf,EAAOb,EAA8BQ,EAAOF,GAU5CuB,EAAuC,MAAXN,GAChCC,UATuCM,IAAhBb,QAA0Ca,IAAbZ,GAehDa,EAlIN,SAAkBvB,GAChB,IAAIe,EAAUf,EAAMe,QAChBJ,EAAMX,EAAMW,IACZC,EAASZ,EAAMY,OACfY,EAASxB,EAAMwB,OACfC,EAAUzB,EAAMyB,QAChBR,EAAcjB,EAAMiB,YACpBS,EAAQ1B,EAAM0B,MACdV,EAAiBhB,EAAMgB,eAEvBW,GAAY,IAAAC,UAAS,WACrBL,EAASI,EAAU,GACnBE,EAAYF,EAAU,IAE1B,IAAAG,YAAU,WACRD,EAAUlB,EAAM,UAAY,aAC3B,CAACA,IACJ,IAAIoB,GAAW,IAAAC,UACXC,GAAO,IAAAC,cAAY,WACrB,GAAKvB,EAAL,CACAwB,IACA,IAAIC,EAAM,IAAIC,MACdD,EAAIzB,IAAMA,EACNM,IAAamB,EAAInB,YAAcA,GAC/BL,IAAQwB,EAAIE,OAAS1B,GACrBc,IAAOU,EAAIV,MAAQA,GACnBX,IAASqB,EAAIrB,QAAUA,GAE3BqB,EAAIG,OAAS,SAAUC,GACrBL,IACAN,EAAU,UACA,MAAVL,GAA0BA,EAAOgB,IAGnCJ,EAAIK,QAAU,SAAUC,GACtBP,IACAN,EAAU,UACC,MAAXJ,GAA2BA,EAAQiB,IAGrCX,EAASY,QAAUP,KAClB,CAACzB,EAAKM,EAAaL,EAAQc,EAAOF,EAAQC,EAASV,IAElDoB,EAAQ,WACNJ,EAASY,UACXZ,EAASY,QAAQJ,OAAS,KAC1BR,EAASY,QAAQF,QAAU,KAC3BV,EAASY,QAAU,OAwBvB,OApBA,QAAoB,WAKlB,IAAI3B,EAMJ,MAJe,YAAXO,GACFU,IAGK,WACLE,OAED,CAACZ,EAAQU,EAAMjB,IAMXA,EAAiB,SAAWO,EA2DtBqB,CAASnE,EAAS,GAAIuB,EAAO,CACxCgB,eAAgBK,KAEdwB,EA3DwB,SAAiCtB,EAAQJ,GACrE,MAAkB,WAAXI,GAA4C,sBAArBJ,GAAuD,WAAXI,GAA4C,YAArBJ,EA0DzE2B,CAAwBvB,EAAQJ,GAEpD4B,EAAStE,EAAS,CACpBwB,IAAKA,EACL+C,UAAWlC,EACXmC,eAAgBpC,GACfQ,EAA4BhB,GAAO,QAAKA,EAAM,CAAC,UAAW,YAE7D,OAAIwC,EAKEnC,GACgB,gBAAoB,SAAYjC,EAAS,CAC3DyE,GAAInD,EACJoD,UAAW,4BACXxC,IAAKF,GACJsC,IAGe,gBAAoB,SAAYtE,EAAS,CAC3DyE,GAAInD,EACJY,IAAKA,EACLC,OAAQA,EACRK,YAAaA,EACbF,QAASA,EACTK,eAAgBA,EAChB+B,UAAW,gBACVJ,OAeD,OACFvC,EAAQ4C,YAAc,U,iBCvOxB,IA6BIC,EAAY,SAAmBC,EAAOC,GACxC,GAAuB,iBAAVD,IAAsBE,MAAMC,QAAQH,GAC/C,MAAM,IAAII,UAAU,gDAGtBH,EAAU7E,OAAOC,OAAO,CACtBgF,YAAY,GACXJ,GAEH,IAAuCK,EAcvC,OATEN,EADEE,MAAMC,QAAQH,GACRA,EAAMO,KAAI,SAAUD,GAC1B,OAAOA,EAAEE,UACRC,QAAO,SAAUH,GAClB,OAAOA,EAAE5E,UACRgF,KAAK,KAEAV,EAAMQ,OAGK,IAAjBR,EAAMtE,OACD,GAGY,IAAjBsE,EAAMtE,OACDuE,EAAQI,WAAaL,EAAMW,cAAgBX,EAAMY,eAGvCZ,IAAUA,EAAMY,gBAGjCZ,EA/DoB,SAA2Ba,GAKjD,IAJA,IAAIC,GAAkB,EAClBC,GAAkB,EAClBC,GAAsB,EAEjBxF,EAAI,EAAGA,EAAIqF,EAAOnF,OAAQF,IAAK,CACtC,IAAIyF,EAAYJ,EAAOrF,GAEnBsF,GAAmB,WAAWI,KAAKD,IAAcA,EAAUN,gBAAkBM,GAC/EJ,EAASA,EAAOM,MAAM,EAAG3F,GAAK,IAAMqF,EAAOM,MAAM3F,GACjDsF,GAAkB,EAClBE,EAAsBD,EACtBA,GAAkB,EAClBvF,KACSuF,GAAmBC,GAAuB,WAAWE,KAAKD,IAAcA,EAAUL,gBAAkBK,GAC7GJ,EAASA,EAAOM,MAAM,EAAG3F,EAAI,GAAK,IAAMqF,EAAOM,MAAM3F,EAAI,GACzDwF,EAAsBD,EACtBA,GAAkB,EAClBD,GAAkB,IAElBA,EAAkBG,EAAUL,gBAAkBK,GAAaA,EAAUN,gBAAkBM,EACvFD,EAAsBD,EACtBA,EAAkBE,EAAUN,gBAAkBM,GAAaA,EAAUL,gBAAkBK,GAI3F,OAAOJ,EAqCGO,CAAkBpB,IAG5BA,EAAQA,EAAMqB,QAAQ,YAAa,IAAIT,cAAcS,QAAQ,mBAAmB,SAAUC,EAAGC,GAC3F,OAAOA,EAAGZ,iBACTU,QAAQ,cAAc,SAAUG,GACjC,OAAOA,EAAEb,iBA/B4BL,EAiCpBN,EAhCVC,EAAQI,WAAaC,EAAEmB,OAAO,GAAGd,cAAgBL,EAAEa,MAAM,GAAKb,IAmCzEoB,EAAOC,QAAU5B,EAEjB2B,EAAOC,QAAP,QAAyB5B,G,ioBC+hBA9C,IAAAA,EC9lBe,oFAERpB,WAwL5B+F,SAAAA,EAgBFC,EACAC,EACAC,EACAtE,EACAuE,GA4BA,YA5BuB,IAAvBA,IAAAA,EAAuB,IAahBA,EAAAA,GAKFD,EAAAA,CACHtE,QAAAA,EACAwE,WAAYJ,EACZ,kBAAkB,GAClBG,MAAM,EAANA,GACKA,EAAAA,CACHE,QAASJ,EAAW,EAAI,iBAa5BK,EACAL,EACAM,EACApF,EACAC,EACAoF,EACA3C,EACAC,GAEA,MAAoC,GAEhC0C,IACFC,EAAaD,gBAAkBA,EAAAA,UAE3BD,GACFE,EAAatF,MAAQA,EACrBsF,EAAarF,OAASA,EACtBqF,EAAaD,gBAAkBA,EAC/BC,EAAaC,SAAAA,aAAAA,gBACJH,GAAAA,cAMAA,KALTE,EAAaC,SAAAA,WACbD,EAAaE,IAAM,EACnBF,EAAaG,KAAO,EACpBH,EAAaI,OAAS,EACtBJ,EAAaK,MAAQ,IAUrBjD,IACF4C,EAAa5C,UAAYA,GAGvBC,IACF2C,EAAa3C,eAAiBA,GAEhC,WACKwC,EAAAA,CACH,eAAc,EACd,yBAAyB,GACzBH,MAAM,EAANA,CACEE,QAASJ,EAAW,EAAI,EACxBc,WAAW,wBACRN,KAeP,OAJItF,EAgF8C6F,ICzT7CC,EDyT6CD,EAAAA,CAAAA,YAAAA,EE3UE,YAGpD5F,IAFAmF,EAEAnF,EAHmEmF,OAEnEpF,EACAC,EAHmED,MAGnEC,EAAAA,EAHmEA,OAKnE,oBAAImF,EAAAA,EAAAA,cAAAA,MAAAA,CAAAA,eAAAA,EAEiBJ,MAAO,CAAEe,WAAgB9F,EAASD,EAAS,2BAI5DoF,EAAAA,EAAAA,cAAAA,MAAAA,CAEKJ,MAAO,CAAEgB,SAAUhG,EAAOiG,QAAQ,UACrCC,EAAAA,cAAAA,MAAAA,CACEpG,IAAI,GACJqG,KAAK,6BACO,OACZ9F,IAAAA,mDAAwDJ,EAAxDI,YAA0EL,EAA1EK,kEACA2E,MAAO,CACLgB,SAAS,OACTC,QAAQ,QACRV,SAAS,aAATA,MAAAA,EAWV,gBAAyBa,EAAAA,EAAFA,SAAe1G,EAAAA,EAAAA,EAAAA,GACpC,uBACG2G,EAAAA,SAAAA,KACCH,EAAAA,cAACI,EAAAA,EAAAA,GAAU5G,IACV0G,EAEmC,OAAAG,EAAAA,CAAAA,MAAAA,SAAAA,UAAAA,MAAAA,cAAAC,EAAAA,CAAAA,WAAAA,UAAAA,cAAAC,EDtEC,gBAC3CpG,EAIA4E,EAL0D5E,IAE1DC,EAGA2E,EAL0D3E,OAG1DG,EAEAwE,EAL0DxE,QAAf,EAK3CwE,EAL0DnF,IAI1DA,OAJ2C,MAI3CA,GAJ2C,EAK3CmF,EAAAA,EAL0DA,WAMvDvF,EAAAA,EAAAA,EAAAA,GAEH,kCAEQA,EAAAA,CACJgH,SAAS,QACTjG,QAASA,EACTJ,IAAK4E,EAAa5E,OAAAA,EAAMW,WACbiE,OAAAA,EAAa5E,EACxBC,OAAQ2E,EAAa3E,OAAAA,EAASU,cAChBiE,OAAAA,EAAa3E,EAC3BR,IAAKA,MAAAA,EAKoC,gBAC7CM,EAEauG,EAHiDvG,SAAjB,EAGhCuG,EAHiDd,QAE9DA,OAF6C,MAEnC,GAFmC,IAGhCc,EAHiD1B,WAG9DA,OAH6C,SAI1CvF,EAAAA,EAAAA,EAAAA,GAEH,EAAcA,EAAM0B,QAAAA,MAAShB,OAAAA,EAAAA,EAAUgB,OAAAA,EAErC8E,EAAAA,cAACnE,EAAAA,EAAAA,GAAUrC,EAAWU,EAAAA,CAAUgB,MAAOA,EAAO6D,WAAYA,KAG5D,OAAKY,EAAQnH,OAAAA,EAAAA,cAAAA,UAAAA,KAMRmH,EAAQtC,KAAI,gBAAGqD,EAAH,EAAGA,MAAOtG,EAAV,EAAUA,OAAQuG,EAAlB,EAAkBA,KAAlB,OACXX,EAAAA,cAAAA,SAAAA,CACEtH,IAAQgI,EAARhI,IAAiBiI,EAAjBjI,IAAyB0B,EACzBuG,KAAMA,EACND,MAAOA,EACPtG,OAAQ2E,EAAa3E,OAAAA,EAASU,cAChBiE,OAAAA,EAAa3E,EAC3Bc,MAAOA,OAGV0E,GAAAA,GAKP/D,EAAM+E,UAAY,CAChBzG,IAAK0G,EAAAA,OAAAA,WACLjH,IAAKiH,EAAAA,OAAAA,WACL3F,MAAO2F,EAAAA,OACPzG,OAAQyG,EAAAA,OACR9B,WAAY8B,EAAAA,MAGdC,EAAQlE,YAAAA,UACRkE,EAAQF,UAAY,CAClBhH,IAAKiH,EAAAA,OAAAA,WACL9B,WAAY8B,EAAAA,KACZ3G,SAAU2G,EAAAA,MAAgB,CACxB1G,IAAK0G,EAAAA,OAAAA,WACLzG,OAAQyG,EAAAA,OACR3F,MAAO2F,EAAAA,SAETlB,QAASkB,EAAAA,QACPA,EAAAA,UAAoB,CAClBA,EAAAA,MAAgB,CACdH,MAAOG,EAAAA,OAAAA,WACPF,KAAME,EAAAA,OACN3F,MAAO2F,EAAAA,OACPzG,OAAQyG,EAAAA,OAAAA,aAEVA,EAAAA,MAAgB,CACdH,MAAOG,EAAAA,OACPF,KAAME,EAAAA,OAAAA,WACN3F,MAAO2F,EAAAA,OACPzG,OAAQyG,EAAAA,OAAAA,iBAAiBE,IAAAA,EAAAA,CAAAA,YAAAA,EE5G/B,gBAAuB7G,EAAAA,EAAFA,SAAeV,EAAAA,EAAAA,EAAAA,GAClC,OAAIU,EAAAA,EAAAA,cAEC4G,EAAAA,EAAAA,GACKtH,EAAAA,CACJU,SAAU,CACRC,IAAKD,GAAAA,eAAAA,EAGPN,IAAI,MAAAoH,EAAAA,cAAAA,MAAAA,EAAAA,GAIQxH,KAItByH,EAAYrE,YAAAA,cACZqE,EAAYL,UAAY,CACtB1G,SAAU2G,EAAAA,OACVlB,QAAQ,OAARA,EAASmB,EAAQF,gBAAAA,EAARM,EAAmBvB,QAC5B/F,IAAK,SAAUJ,EAAO2H,EAAUC,GAC9B,OAAK5H,EAAM2H,GAAAA,IAAAA,MAAAA,iBAKSA,EALTA,kBAKqCC,EALrCD,yBAKqCC,OChCvCC,IAAAA,EAAoC,SAAmB7H,GAClE,uCAEIwG,EAAAA,cAACc,EAAAA,EAAAA,GAAYtH,IACbwG,EAAAA,cAAAA,WAAAA,KACEA,EAAAA,cAACc,EAAAA,EAAAA,GAAYtH,EAAAA,CAAOuF,YAAAA,QAM5BsC,EAAUzE,YAAAA,YACVyE,EAAUT,UAAYE,EAAQF,UAAAA,ICY9B,IDZ8BA,EE2G2B,SACvDpH,EACA2H,EACAC,GAHuD,2BAIpDvH,EAJoD,iCAIpDA,EAJoD,yBAMlDL,EAAMI,KAAAA,KAAOJ,EAAMI,IAAAA,IAAAA,OAAAA,MAAAA,IAAAA,CAMAJ,EAAO2H,EAAUC,GANjBxH,OAMmCC,IAAAA,IAAAA,MAAAA,iCAJtBuH,EAIsBvH,4JAJtBuH,EAOd,CACvBE,MAAOT,IAAAA,OAAAA,WACPjH,IAAK2H,GAAAA,EAAAA,CAAAA,KAAAA,QAAAA,QAAAA,kBAAAA,YAAAA,QAAAA,cAAAA,SAAAA,WAAAA,EAAAA,CAAAA,QAAAA,aAAAA,EDjHY,IAAIC,IAkCvB,EAAkD,kBAShDvG,EAT6EyB,GAC7EA,OADgD,MAChDA,MADgD,EAEhD4E,EAOArG,EAT6EqG,MAG7ExC,EAMA7D,EAT6E6D,MAI7EK,EAKAlE,EAT6EkE,gBAK7ExC,EAIA1B,EAT6E0B,UAMtE8E,EAGPxG,EAHAyG,MACAC,EAEA1G,EAT6E0G,YAQ7E3G,EACAC,EAT6ED,OAS7EC,EAAAA,EAT6EA,QAU1EzB,EAAAA,EAAAA,EAAAA,GAEKM,EAA0BwH,EAA5BxH,MAASC,EAAmBuH,EAA5BvH,OAAiBmF,EAAWoC,EAA5BpC,OAA4BoC,EAAAA,SLIlCxH,EACAC,EACAmF,GAIA,MAAoC,GAEpC,yBAmBA,MAde0C,UAGX1C,GACFE,EAAatF,MAAQA,EACrBsF,EAAarF,OAASA,GAAAA,gBACbmF,IAKTvC,EAAAA,yDAGK,CACLA,UAAAA,EACA,4BAA4B,GAC5BmC,MAAOM,GKlCyBkC,CAKdxH,EAAOC,EAAQmF,GAH1B2C,EACIC,EADXhD,MACWgD,EAAAA,EAAXnF,UACGoF,EAAAA,EAAAA,EAAAA,GAAAA,GAEQvG,EAAAA,EAAAA,UAAAA,GACIwG,EAAAA,EAAAA,UAAQ,kBAAMC,KAAKC,UAAUZ,EAAMzC,UAAS,CAACyC,EAAMzC,SAGhE4C,IACF9E,EAAY8E,GAGd,eHxCAvC,EACApF,EACAC,GAEA,SAWA,MAAM,cAVFmF,IACFiD,EAAAA,+CACGpI,EAASD,EAAS,IADrBqI,cACqB,gBAInBjD,IACFiD,EAAAA,0BAAkCrI,EAAlCqI,iIAAuKpI,EAAvKoI,YAAyLrI,EAAzLqI,yIAAyLrI,EG4B3L,CAAuBoF,EAAQpF,EAAOC,GA8HtC,OA5HAuB,EAAAA,EAAAA,YAAU,WACH8G,IACHA,EAA6BC,QAAAA,IAAAA,CAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,OAAAA,KAAAA,EAAAA,KAAAA,EAAAA,OAAyBC,MACpD,gBAAGC,EAAH,EAAGA,oBAAqBC,EAAxB,EAAwBA,qBAAxB,OACEC,EAAcF,EAEP,CACLA,oBAAAA,EACAC,qBAAAA,OAQR,IA2CA,IA3CA,EAAiBE,EAAKvG,QAAQwG,cAAAA,2BAG9B,OAAIC,GAAYC,KACVD,EAASE,UAAAA,MAEXnB,GAAAA,EAAc,CACZoB,WAAU,IAAC,MAEb/H,GAAAA,EAAS,CACP+H,WAAU,IAIZC,YAAW,WACTJ,EAASK,gBAAAA,2BACR,IAEHC,SAASC,iBAAAA,QAAyB,SAAS,IACzCD,SAASE,oBAAAA,OAA4BC,GAAAA,MAErC1B,GAAAA,EAAc,CACZoB,WAAU,IAAC,MAEb/H,GAAAA,EAAS,CACP+H,WAAU,IAGZC,YAAW,WACTJ,EAASK,gBAAAA,2BACR,WAIPK,EAAWC,IAAIC,IAKbf,GAAea,EAAWG,IAAID,QAAlC,GAMApB,EAA2BE,MACzB,YAAwBE,IAArBD,EAAqBC,EAArBD,oBAAqBC,EAAAA,EAAAA,qBACjBE,EAAKvG,UAIVuG,EAAKvG,QAAQuH,UAAYnB,EAAAA,EAAAA,CACvB5D,WAAU,EACVC,SAAU0E,EAAWG,IAAID,GACzBlC,MAAAA,GACG9H,IAGA8J,EAAWG,IAAID,KAClBG,EAAiBC,uBAAsB,WACjClB,EAAKvG,UACP0H,EAAkBrB,EAChBE,EAAKvG,QACLqH,EACAF,EACAxE,EACA6C,EACA3G,EACAC,YASL,WACD0I,GACFG,qBAAqBH,GAEnBE,GACFA,QAGH,CAACvC,KAGJyC,EAAAA,EAAAA,kBAAgB,WACVT,EAAWG,IAAID,IAAaf,IAC9BC,EAAKvG,QAAQuH,UAAYjB,EAAAA,EAAAA,CACvB9D,UAAW2E,EAAWG,IAAID,GAC1B5E,SAAU0E,EAAWG,IAAID,GACzBlC,MAAAA,GACG9H,IAAAA,MAILmI,GAAAA,EAAc,CACZoB,WAAU,IAAC,MAEb/H,GAAAA,EAAS,CACP+H,WAAU,OAGb,CAACzB,KAAAA,EAAAA,EAAAA,eAGiB5E,EAAAA,EAAAA,GAChBqF,EAAAA,CACHjD,MAAM,EAANA,GACK+C,EACA/C,EAAAA,CACHK,gBAAAA,IAEFxC,UAAcmF,GAASnF,EAAAA,IAAgBA,EAAAA,IACvClD,IAAKiJ,EACLsB,wBAAyB,CACvBC,OAAQ9B,GAEV+B,0BAAyB,MAACC,GAIkCC,EAAAA,EAAAA,OAC9D,SAAqB5K,GACnB,OAAKA,EAAM8H,OASD+C,EAAAA,EAAAA,eAKWC,EAAqB9K,GAZ9B6K,QAgBhBE,EAAY3D,UAAYA,EACxB2D,EAAY3H,YAAAA,cAAAA,IErOV2H,EFqOU3H,EAAAA,CAAAA,MAAAA,cAAAA,UAAAA,QAAAA,SAAAA,cAAAA,mBAAAA,cAAAA,UAAAA,UAAAA,mBAAAA,aAAAA,aAAAA,cAAAA,cAAAA,kBAAAA,EEzL6C,SACvDpD,EACA2H,GAFuD,2BAGpDtH,EAHoD,iCAGpDA,EAHoD,wBAGpDA,cAGDL,EAAM0F,QAAAA,UACLiC,GAAAA,WAAwBA,IACzB3H,EAAM2H,GAAAA,IAAAA,OAAAA,MAAAA,IAAAA,CAMgB3H,EAAO2H,GANvBA,OAMoCtH,IAAAA,IAAAA,MAAAA,IAHpCsH,EAGoCtH,KAHvBL,EAAM2H,GAGiBtH,iDAHjBsH,EAMR,IAAIK,IAAI,CAAC,QAAD,4BAAAgD,EAEJ,CACvBrK,IAAK0G,IAAAA,OAAAA,WACLjH,IAAK2H,EACLzH,MAAO2K,EACP1K,OAAQ0K,EACRvJ,MAAO2F,IAAAA,OACP3B,OAAS1F,SAAAA,GACP,YAAIA,EAAM0F,SAGNwF,EAAajB,IAAIjK,EAAM0F,QAI3B,OAAO,IAAIyF,MAAM,iBACEnL,EAAM0F,OADzB,wHACyBA,GA9E3BqF,ECLgBK,EDOT,SAAP,OACEzK,EAEA0K,EAH0B1K,IAEb2K,EACbD,EADAE,YACAF,EAAAA,EAH0BA,QAoBvBrL,EAAAA,EAAAA,EAAAA,GAMH,OAJIqL,GACFG,QAAQX,KAAKQ,GAGXC,EAAAA,EAAAA,cACMP,EAAAA,EAAAA,CAAYjD,MAAOwD,GAAetL,KAE5CwL,QAAQX,KAAAA,mBAAyBlK,GAEvBkK,QCpCdY,EAAYrI,YAAAA,cACZqI,EAAYrE,UAAYA,G,6HCVjB,SAASsE,EAAT,GAAoC,IAAD,cAAfC,EAAe,EAAfA,KACnBC,GAAQC,EAAAA,EAAAA,IAAkB,gBAAiB,kBAC3CC,EAAO,UACXH,EAAKI,mBADM,iBACXC,EAAkBC,qBADP,iBACXC,EAAiCC,uBADtB,aACXC,EAAkDC,gBAC9CC,EAAO,UAAGX,EAAKI,mBAAR,aAAGQ,EAAkBC,cAC5BC,EAAO,IAAId,EAAKe,MAAU,EAEhC,OACElG,EAAAA,cAACmG,EAAAA,GAAD,CACEC,GAAI,CACF1G,WAAY,qBACZ2G,OAAQ,CACNC,UAAW,qBAGfC,OAAO,UACPlH,SAAS,YAETW,EAAAA,cAACwG,EAAAA,GAAD,CACE9J,GAAI+J,EAAAA,KACJC,GAAIT,EACJ5G,SAAS,WACTC,IAAI,IACJE,OAAO,IACPC,MAAM,IACNF,KAAK,IACLoH,OAAO,MAET3G,EAAAA,cAACmG,EAAAA,GAAD,CAAKS,WAAW,KAAKhF,SAAS,UAC3BkE,GACC9F,EAAAA,cAACnE,EAAAA,GAAD,CACE1B,IAAK2L,EACLlM,KAAK,UAAAuL,EAAKI,mBAAL,eAAkBsB,eAAgB,GACvCrK,UAAU,QACVzC,OAAO,QACP+M,EAAE,UAGJhB,GAAWR,GACXtF,EAAAA,cAACuE,EAAAA,EAAD,CACE/H,UAAU,QACVsC,MAAO,CAAE/E,OAAQ,QAASD,MAAO,QACjCwH,MAAOgE,EACP1L,KAAK,UAAAuL,EAAKI,mBAAL,eAAkBsB,eAAgB,MAI7C7G,EAAAA,cAACmG,EAAAA,GAAD,CACEY,GAAI3B,EACJ4B,EAAG,EACHC,cAAc,KACdL,WAAcd,GAAYR,OAAoBxK,EAAT,MAErCkF,EAAAA,cAACkH,EAAAA,GAAD,CAASxK,GAAG,KAAKyK,SAAS,MAAMC,GAAG,KAAnC,UACGjC,EAAKI,mBADR,aACG8B,EAAkBC,OAErBtH,EAAAA,cAACmG,EAAAA,GAAD,CAAKoB,eAAe,QAClBvH,EAAAA,cAACwH,EAAAA,EAAD,CAAUrC,KAAMA,S,0ECP1B,IA1Ce,SAAC,GAA0C,IAAD,IAAvCsC,EAAuC,EAAvCA,SAAUH,EAA6B,EAA7BA,MAAOpH,EAAsB,EAAtBA,SACjC,GAAuCwH,EAAAA,EAAAA,MAA/BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,gBACbC,GAAcxC,EAAAA,EAAAA,IAAkB,iBAAkB,kBAElDyC,EADcC,WACDN,EAASO,SAEtBC,GAAOC,EAAAA,EAAAA,gBAAc,aAU3B,OACElI,EAAAA,cAACmI,EAAAA,GAAD,CAAWC,KAAK,eAAe,oBAAmBN,GAChD9H,EAAAA,cAACmG,EAAAA,GAAD,CAAKzJ,GAAG,SAAS0K,GAAG,MAClBpH,EAAAA,cAACkH,EAAAA,GAAD,CAASxK,GAAG,KAAK2L,UAAU,SAASC,KAAK,MAAMC,GAAG,MAChDvI,EAAAA,cAACwG,EAAAA,GAAD,CAAM9J,GAAI8L,EAAAA,KAAY9B,GAAG,IAAI+B,GAAG,cAC7BnB,GAEHtH,EAAAA,cAAC0I,EAAAA,GAAD,CAAQC,QAASf,EAAiBgB,GAAG,IAAIC,QAAQ,WAChC,UAAdlB,EAAwB,KAAO,QAItC3H,EAAAA,cAACmG,EAAAA,GAAD,CAAKzJ,GAAG,OAAO6L,GAAG,MACfrI,GAEHF,EAAAA,cAACmG,EAAAA,GAAD,CAAKzJ,GAAG,SAASoM,GAAG,KAAK1B,GAAG,KAAKhC,MAAOyC,GAAxC,MACK,IAAIkB,MAAOC,cADhB,eACiCf,EAAKgB,YADtC,iBACiCC,EAAWC,oBAD5C,aACiCC,EAAyBC,UACxDrJ,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAACwG,EAAAA,GAAD,CAAM8C,KAAK,gCAAgC/B,eAAe,aAA1D,6B,sFC7CD,SAASC,EAAT,GAAoC,IAAD,IAAfrC,EAAe,EAAfA,KACnB4B,GAAK1B,EAAAA,EAAAA,IAAkB,WAAY,kBACnCkE,EAAG,UAAGpE,EAAKI,mBAAR,aAAGC,EAAkB+D,IACxBC,GAAarE,aAAAA,EAAAA,EAAMqE,aAAc,EAEvC,OACExJ,EAAAA,cAACmG,EAAAA,GAAD,KACGoD,GACCvJ,EAAAA,cAACyJ,EAAAA,GAAD,CAAMC,GAAG,MAAMC,GAAG,IAAIjN,GAAG,OAAOyK,SAAS,KAAKJ,GAAIA,EAAI6C,QAAQ,MAC3DL,GAIJA,GAAO,MAPV,UAQGpE,EAAKI,mBARR,aAQGQ,EAAkB8D,KAClBL,EAAa,EAAbA,MAAuBA,EAAvB,YAA+C","sources":["webpack://gatsby-starter-blog/./.yarn/__virtual__/@chakra-ui-image-virtual-5a4c6bbf0f/0/cache/@chakra-ui-image-npm-2.0.3-c1f2e7d122-0fbe1b72c1.zip/node_modules/@chakra-ui/image/dist/chakra-ui-image.esm.js","webpack://gatsby-starter-blog/./.yarn/cache/camelcase-npm-5.3.1-5db8af62c5-e6effce26b.zip/node_modules/camelcase/index.js","webpack://gatsby-starter-blog/../src/image-utils.ts","webpack://gatsby-starter-blog/../src/components/hooks.ts","webpack://gatsby-starter-blog/../src/components/picture.tsx","webpack://gatsby-starter-blog/../src/components/layout-wrapper.tsx","webpack://gatsby-starter-blog/../src/components/placeholder.tsx","webpack://gatsby-starter-blog/../src/components/main-image.tsx","webpack://gatsby-starter-blog/../src/components/gatsby-image.browser.tsx","webpack://gatsby-starter-blog/../src/components/gatsby-image.server.tsx","webpack://gatsby-starter-blog/../src/components/static-image.server.tsx","webpack://gatsby-starter-blog/../src/components/static-image.tsx","webpack://gatsby-starter-blog/./src/components/LastPost.tsx","webpack://gatsby-starter-blog/./src/components/Layout.tsx","webpack://gatsby-starter-blog/./src/components/PostInfo.tsx"],"sourcesContent":["import { forwardRef, chakra } from '@chakra-ui/system';\nimport { omit, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { useSafeLayoutEffect } from '@chakra-ui/hooks';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\n\n\nfunction useImage(props) {\n  var loading = props.loading,\n      src = props.src,\n      srcSet = props.srcSet,\n      onLoad = props.onLoad,\n      onError = props.onError,\n      crossOrigin = props.crossOrigin,\n      sizes = props.sizes,\n      ignoreFallback = props.ignoreFallback;\n\n  var _useState = useState(\"pending\"),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  useEffect(function () {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  var imageRef = useRef();\n  var load = useCallback(function () {\n    if (!src) return;\n    flush();\n    var img = new Image();\n    img.src = src;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (loading) img.loading = loading;\n\n    img.onload = function (event) {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n\n    img.onerror = function (error) {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n\n  var flush = function flush() {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n\n  useSafeLayoutEffect(function () {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined;\n\n    if (status === \"loading\") {\n      load();\n    }\n\n    return function () {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n\n  return ignoreFallback ? \"loaded\" : status;\n}\n\nvar shouldShowFallbackImage = function shouldShowFallbackImage(status, fallbackStrategy) {\n  return status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\" || status === \"failed\" && fallbackStrategy === \"onError\";\n};\n\nvar _excluded = [\"htmlWidth\", \"htmlHeight\", \"alt\"],\n    _excluded2 = [\"fallbackSrc\", \"fallback\", \"src\", \"srcSet\", \"align\", \"fit\", \"loading\", \"ignoreFallback\", \"crossOrigin\", \"fallbackStrategy\", \"referrerPolicy\"];\nvar NativeImage = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var htmlWidth = props.htmlWidth,\n      htmlHeight = props.htmlHeight,\n      alt = props.alt,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"img\", _extends({\n    width: htmlWidth,\n    height: htmlHeight,\n    ref: ref,\n    alt: alt\n  }, rest));\n});\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\n\nvar Image$1 = /*#__PURE__*/forwardRef(function (props, ref) {\n  var fallbackSrc = props.fallbackSrc,\n      fallback = props.fallback,\n      src = props.src,\n      srcSet = props.srcSet,\n      align = props.align,\n      fit = props.fit,\n      loading = props.loading,\n      ignoreFallback = props.ignoreFallback,\n      crossOrigin = props.crossOrigin,\n      _props$fallbackStrate = props.fallbackStrategy,\n      fallbackStrategy = _props$fallbackStrate === void 0 ? \"beforeLoadOrError\" : _props$fallbackStrate,\n      referrerPolicy = props.referrerPolicy,\n      rest = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  var providedFallback = fallbackSrc !== undefined || fallback !== undefined;\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n\n  var shouldIgnoreFallbackImage = loading != null || // use can opt out of fallback image\n  ignoreFallback || // if the user doesn't provide any kind of fallback we should ignore it\n  !providedFallback;\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n\n  var status = useImage(_extends({}, props, {\n    ignoreFallback: shouldIgnoreFallbackImage\n  }));\n  var showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n\n  var shared = _extends({\n    ref: ref,\n    objectFit: fit,\n    objectPosition: align\n  }, shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"]));\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback;\n    return /*#__PURE__*/React.createElement(chakra.img, _extends({\n      as: NativeImage,\n      className: \"chakra-image__placeholder\",\n      src: fallbackSrc\n    }, shared));\n  }\n\n  return /*#__PURE__*/React.createElement(chakra.img, _extends({\n    as: NativeImage,\n    src: src,\n    srcSet: srcSet,\n    crossOrigin: crossOrigin,\n    loading: loading,\n    referrerPolicy: referrerPolicy,\n    className: \"chakra-image\"\n  }, shared));\n});\n/**\n * Fallback component for most SSR users who want to use the native `img` with\n * support for chakra props\n */\n\nvar Img = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(chakra.img, _extends({\n    ref: ref,\n    as: NativeImage,\n    className: \"chakra-image\"\n  }, props));\n});\n\nif (__DEV__) {\n  Image$1.displayName = \"Image\";\n}\n\nexport { Image$1 as Image, Img, shouldShowFallbackImage, useImage };","'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        document.addEventListener(`load`, function onLoadListener() {\n          document.removeEventListener(`load`, onLoadListener)\n\n          onStartLoad?.({\n            wasCached: true,\n          })\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import { Box, Heading, Image, Link, useColorModeValue } from \"@chakra-ui/react\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\nimport { Link as RouterLink } from \"gatsby\";\nimport React from \"react\";\nimport { PostInfo } from \"./PostInfo\";\n\ntype Props = {\n  post: Queries.Mdx;\n};\n\nexport function LastPost({ post }: Props) {\n  const color = useColorModeValue(\"blackAlpha.50\", \"whiteAlpha.100\");\n  const imgFile =\n    post.frontmatter?.heroImageFile?.childImageSharp?.gatsbyImageData;\n  const imgLink = post.frontmatter?.heroImageLink;\n  const link = `/${post.slug}` || \"\";\n\n  return (\n    <Box\n      sx={{\n        transition: \"transform .2s ease\",\n        _hover: {\n          transform: \"translateY(-4px)\",\n        },\n      }}\n      cursor=\"pointer\"\n      position=\"relative\"\n    >\n      <Link\n        as={RouterLink}\n        to={link}\n        position=\"absolute\"\n        top=\"0\"\n        bottom=\"0\"\n        right=\"0\"\n        left=\"0\"\n        zIndex=\"1\"\n      />\n      <Box roundedTop=\"xl\" overflow=\"hidden\">\n        {imgLink && (\n          <Image\n            src={imgLink}\n            alt={post.frontmatter?.heroImageAlt || \"\"}\n            objectFit=\"cover\"\n            height=\"200px\"\n            w=\"100%\"\n          />\n        )}\n        {!imgLink && imgFile && (\n          <GatsbyImage\n            objectFit=\"cover\"\n            style={{ height: \"200px\", width: \"100%\" }}\n            image={imgFile}\n            alt={post.frontmatter?.heroImageAlt || \"\"}\n          />\n        )}\n      </Box>\n      <Box\n        bg={color}\n        p={8}\n        roundedBottom=\"xl\"\n        roundedTop={(!imgLink && !imgFile && \"xl\") || undefined}\n      >\n        <Heading as=\"h3\" fontSize=\"3xl\" mb=\"3\">\n          {post.frontmatter?.title}\n        </Heading>\n        <Box textDecoration=\"none\">\n          <PostInfo post={post} />\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n","import * as React from \"react\";\nimport { graphql, Link as GatsbyLink, PageProps, useStaticQuery } from \"gatsby\";\nimport {\n  Box,\n  Button,\n  Container,\n  Heading,\n  useColorMode,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { Link } from \"@chakra-ui/react\";\n\ntype Props = {\n  location: PageProps<Queries.Query>[\"location\"];\n  title?: Queries.Maybe<string>;\n  children?: React.ReactNode;\n};\n\nconst Layout = ({ location, title, children }: Props) => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const footerColor = useColorModeValue(\"blackAlpha.600\", \"whiteAlpha.500\");\n  const rootPath = `${__PATH_PREFIX__}/`;\n  const isRootPath = location.pathname === rootPath;\n\n  const data = useStaticQuery<Queries.Query>(graphql`\n    query {\n      site {\n        siteMetadata {\n          copyright\n        }\n      }\n    }\n  `);\n\n  return (\n    <Container maxW=\"container.xl\" data-is-root-path={isRootPath}>\n      <Box as=\"header\" mb=\"12\">\n        <Heading as=\"h1\" textAlign=\"center\" size=\"4xl\" my=\"12\">\n          <Link as={GatsbyLink} to=\"/\" id=\"blog-title\">\n            {title}\n          </Link>\n          <Button onClick={toggleColorMode} ml=\"4\" variant=\"outline\">\n            {colorMode === \"light\" ? \"🌙\" : \"💡\"}\n          </Button>\n        </Heading>\n      </Box>\n      <Box as=\"main\" my=\"12\">\n        {children}\n      </Box>\n      <Box as=\"footer\" mt=\"12\" mb=\"12\" color={footerColor}>\n        © {new Date().getFullYear()}, {data.site?.siteMetadata?.copyright}\n        <br />\n        <Link href=\"https://github.com/fastup-kit\" textDecoration=\"underline\">\n          Built with OpenSource\n        </Link>\n      </Box>\n    </Container>\n  );\n};\n\nexport default Layout;\n","import { Box, Tag, Text, useColorModeValue } from \"@chakra-ui/react\";\nimport React from \"react\";\n\ntype Props = {\n  post: Queries.Mdx;\n};\n\nexport function PostInfo({ post }: Props) {\n  const bg = useColorModeValue(\"gray.300\", \"whiteAlpha.200\");\n  const tag = post.frontmatter?.tag;\n  const timeToRead = post?.timeToRead || 0;\n\n  return (\n    <Box>\n      {tag && (\n        <Text px=\"1.5\" py=\"1\" as=\"span\" fontSize=\"sm\" bg={bg} rounded=\"md\">\n          {tag}\n        </Text>\n      )}\n\n      {tag && \" · \"}\n      {post.frontmatter?.date}\n      {timeToRead > 0 ? ` · ${timeToRead} min read` : \"\"}\n    </Box>\n  );\n}\n"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","_excluded","_excluded2","NativeImage","props","ref","htmlWidth","htmlHeight","alt","rest","width","height","Image$1","fallbackSrc","fallback","src","srcSet","align","fit","loading","ignoreFallback","crossOrigin","_props$fallbackStrate","fallbackStrategy","referrerPolicy","shouldIgnoreFallbackImage","undefined","status","onLoad","onError","sizes","_useState","useState","setStatus","useEffect","imageRef","useRef","load","useCallback","flush","img","Image","srcset","onload","event","onerror","error","current","useImage","showFallbackImage","shouldShowFallbackImage","shared","objectFit","objectPosition","as","className","displayName","camelCase","input","options","Array","isArray","TypeError","pascalCase","x","map","trim","filter","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","format","isLoading","isLoaded","images","style","shouldLoad","opacity","placeholder","layout","backgroundColor","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","role","children","Fragment","Sizer","q","H","P","decoding","t","media","type","propTypes","PropTypes","Picture","isRequired","e","Placeholder","_Picture$propTypes","propName","componentName","MainImage","image","altValidator","Set","preactClass","class","onStartLoad","overflow","wStyle","wClass","wrapperProps","useMemo","JSON","stringify","sizer","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","document","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","memo","warn","GatsbyImageHydrator","GatsbyImage","se","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","LastPost","post","color","useColorModeValue","imgFile","frontmatter","_post$frontmatter","heroImageFile","_post$frontmatter$her","childImageSharp","_post$frontmatter$her2","gatsbyImageData","imgLink","_post$frontmatter2","heroImageLink","link","slug","Box","sx","_hover","transform","cursor","Link","RouterLink","to","zIndex","roundedTop","heroImageAlt","w","bg","p","roundedBottom","Heading","fontSize","mb","_post$frontmatter5","title","textDecoration","PostInfo","location","useColorMode","colorMode","toggleColorMode","footerColor","isRootPath","__PATH_PREFIX__","pathname","data","useStaticQuery","Container","maxW","textAlign","size","my","GatsbyLink","id","Button","onClick","ml","variant","mt","Date","getFullYear","site","_data$site","siteMetadata","_data$site$siteMetada","copyright","href","tag","timeToRead","Text","px","py","rounded","date"],"sourceRoot":""}