{"version":3,"sources":["containers/App/background.jpg","containers/App/background-90.jpg","containers/App/background-80.jpg","containers/App/App.jsx","registerServiceWorker.js","index.js"],"names":["GlobalStyles","createGlobalStyle","Root","styled","div","backgroundImageUrl","backgroundImageUrl90","backgroundImageUrl80","TextBlock","Name","h1","Description","p","DescriptionLink","a","Copyright","VtbLink","href","target","rel","Links","SocietyLinkTag","BackgroundShadow","SocietyLink","children","App","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAAe,MAA0B,uCCA1B,MAA0B,0CCA1B,MAA0B,0C,8uFCMzC,IAAMA,EAAeC,YAAH,KAMZC,EAAOC,IAAOC,IAAV,IAKiBC,EAUEC,EAIAC,GAIvBC,EAAYL,IAAOC,IAAV,KAYTK,EAAON,IAAOO,GAAV,KAUJC,EAAcR,IAAOS,EAAV,KAiBXC,EAAkBV,IAAOW,EAAV,KAEfC,EAAYZ,IAAOS,EAAV,KAaTI,EAAU,kBACd,cAACH,EAAD,CAAiBI,KAAK,iBAAiBC,OAAO,SAASC,IAAI,WAA3D,qBAKIC,EAAQjB,IAAOC,IAAV,KAgBLiB,EAAiBlB,IAAOW,EAAV,KAadQ,EAAmBnB,IAAOC,IAAV,KAWhBmB,EAAc,SAAC,GAAD,IAAGN,EAAH,EAAGA,KAAMO,EAAT,EAASA,SAAT,OAClB,cAACH,EAAD,CAAgBJ,KAAMA,EAAMC,OAAO,SAASC,IAAI,WAAhD,SACGK,KAIQC,EAAb,uKAEI,OACE,eAACvB,EAAD,WACE,cAACF,EAAD,IACA,cAACsB,EAAD,IACA,eAACd,EAAD,+BAEE,cAACC,EAAD,+BACA,eAACE,EAAD,mCACuB,cAAC,EAAD,UAGzB,cAACI,EAAD,yCACA,eAACK,EAAD,WACE,cAAC,EAAD,CAAaH,KAAK,kCAAlB,SACE,mBAAGS,UAAU,wBAEf,cAAC,EAAD,CAAaT,KAAK,6BAAlB,SACE,mBAAGS,UAAU,gBAEf,cAAC,EAAD,CAAaT,KAAK,sCAAlB,SACE,mBAAGS,UAAU,uBAEf,cAAC,EAAD,CAAaT,KAAK,+BAAlB,SACE,mBAAGS,UAAU,oBAEf,cAAC,EAAD,CAAaT,KAAK,+BAAlB,SACE,mBAAGS,UAAU,gCA5BzB,GAAyBC,aCnILC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDyG3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7f01c437.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background.f82d53ce.jpg\";","export default __webpack_public_path__ + \"static/media/background-90.1433d486.jpg\";","export default __webpack_public_path__ + \"static/media/background-80.d9e6041a.jpg\";","import React, { Component } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport backgroundImageUrl from \"./background.jpg\";\nimport backgroundImageUrl90 from \"./background-90.jpg\";\nimport backgroundImageUrl80 from \"./background-80.jpg\";\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    font-family: Roboto;\n  }\n`;\n\nconst Root = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: 100vh;\n  align-items: center;\n  background-image: url(\"${backgroundImageUrl}\");\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n\n  @media screen and (max-width: 767px) {\n    justify-content: center;\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1366px) {\n    background-image: url(\"${backgroundImageUrl90}\");\n  }\n\n  @media screen and (max-width: 768px) {\n    background-image: url(\"${backgroundImageUrl80}\");\n  }\n`;\n\nconst TextBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 0 0 128px;\n  color: white;\n  z-index: 1;\n\n  @media screen and (max-width: 767px) {\n    margin: 8px;\n  }\n`;\n\nconst Name = styled.h1`\n  font-size: 64px;\n  width: 100%;\n  margin: 0;\n\n  @media screen and (max-width: 767px) {\n    font-size: 32px;\n  }\n`;\n\nconst Description = styled.p`\n  margin: 4px;\n  font-weight: 200;\n  font-size: 24px;\n  background: #ff47bb; /* Old Browsers */\n  background: -webkit-linear-gradient(left, #ff47bb, #c347ff); /*Safari 5.1-6*/\n  background: -o-linear-gradient(left, #ff47bb, #c347ff); /*Opera 11.1-12*/\n  background: -moz-linear-gradient(left, #ff47bb, #c347ff); /*Fx 3.6-15*/\n  background: linear-gradient(to right, #ff47bb, #c347ff); /*Standard*/\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n\n  @media screen and (max-width: 767px) {\n    font-size: 18px;\n  }\n`;\n\nconst DescriptionLink = styled.a``;\n\nconst Copyright = styled.p`\n  position: absolute;\n  right: 32px;\n  bottom: 32px;\n  color: white;\n  margin: 0;\n\n  @media screen and (max-width: 767px) {\n    right: 8px;\n    bottom: 8px;\n  }\n`;\n\nconst VtbLink = () => (\n  <DescriptionLink href=\"https://vtb.ru\" target=\"_blank\" rel=\"noopener\">\n    vtb.ru\n  </DescriptionLink>\n);\n\nconst Links = styled.div`\n  color: white;\n  position: absolute;\n  bottom: 32px;\n  left: 32px;\n  font-size: 28px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  @media screen and (max-width: 767px) {\n    bottom: 8px;\n    left: 8px;\n  }\n`;\n\nconst SocietyLinkTag = styled.a`\n  color: white;\n  margin-bottom: 6px;\n\n  :last-child {\n    margin-bottom: 0;\n  }\n\n  :visited {\n    color: white;\n  }\n`;\n\nconst BackgroundShadow = styled.div`\n  position: absolute;\n  background-color: rgba(0, 0, 0, 0.5);\n  height: 100%;\n  width: 100%;\n\n  @media screen and (max-width: 767px) {\n    background-color: rgba(0, 0, 0, 0.66);\n  }\n`;\n\nconst SocietyLink = ({ href, children }) => (\n  <SocietyLinkTag href={href} target=\"_blank\" rel=\"noopener\">\n    {children}\n  </SocietyLinkTag>\n);\n\nexport class App extends Component {\n  render() {\n    return (\n      <Root>\n        <GlobalStyles />\n        <BackgroundShadow />\n        <TextBlock>\n          Hi, I'm @luchanso\n          <Name>Loutchansky Oleg</Name>\n          <Description>\n            Software engineer at <VtbLink />\n          </Description>\n        </TextBlock>\n        <Copyright>Mandelbrot by Daniel White</Copyright>\n        <Links>\n          <SocietyLink href=\"https://fb.com/oleg.loutchansky\">\n            <i className=\"fab fa-facebook-f\" />\n          </SocietyLink>\n          <SocietyLink href=\"https://vk.com/loutchansky\">\n            <i className=\"fab fa-vk\" />\n          </SocietyLink>\n          <SocietyLink href=\"https://www.instagram.com/luchanso/\">\n            <i className=\"fab fa-instagram\" />\n          </SocietyLink>\n          <SocietyLink href=\"https://github.com/luchanso/\">\n            <i className=\"fab fa-github\" />\n          </SocietyLink>\n          <SocietyLink href=\"https://telegram.me/luchanso\">\n            <i className=\"fab fa-telegram\" />\n          </SocietyLink>\n        </Links>\n      </Root>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App }from './containers/App';\nimport { unregister } from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nunregister();\n"],"sourceRoot":""}